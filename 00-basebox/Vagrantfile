# -*- mode: ruby -*-
# vi: set ft=ruby :

# You can login to the master via:
# ssh-add ~/.vagrant.d/insecure_private_key
# ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no vagrant@192.168.56.100
# ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 2222 vagrant@localhost

# vagrant plugin install vagrant-reload
# vagrant plugin install vagrant-vbguest


Vagrant.require_version ">= 1.6.0"

boxes = [
    {
        :name => "master",
        :eth1 => "192.168.56.100",
        :mem => "2048",
        :cpu => "2"
    },
]

# enp0s8
# eth1
bring_up_host_interface = <<SCRIPT
sudo ip link set dev enp0s8 up
SCRIPT

Vagrant.configure(2) do |config|

  # if Vagrant.has_plugin?("vagrant-vbguest")
  #   config.vbguest.auto_update = false
  # end

  config.disksize.size = '25GB'

  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true
  config.ssh.insert_key = false
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  config.vm.synced_folder ".", "/vagrant"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]

        config.vm.box = "ubuntu/bionic64"
        config.vm.box_version = "20190828.0.0"
        # config.vm.box = "debian/buster64"
        # config.vm.box_version = "10.0.0"
        config.vm.box_check_update = false

        config.vm.provider "virtualbox" do |virtualbox|
          virtualbox.gui = false
          virtualbox.customize ["modifyvm", :id, "--memory", opts[:mem]]
          virtualbox.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

          virtualbox.customize ["modifyvm", :id, "--apic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--ioapic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--x2apic", "on"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--biosapic", "x2apic"] # turn on I/O APIC
          virtualbox.customize ["modifyvm", :id, "--ostype", "Ubuntu_64"] # set guest OS type
          virtualbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # enables DNS resolution from guest using host's DNS
          virtualbox.customize ["modifyvm", :id, "--natdnsproxy1", "on"] # enables DNS requests to be proxied via the host
          virtualbox.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"] # turn on promiscuous mode on nic 2
          virtualbox.customize ["modifyvm", :id, "--nictype1", "virtio"]
          virtualbox.customize ["modifyvm", :id, "--nictype2", "virtio"]
          virtualbox.customize ["modifyvm", :id, "--pae", "on"] # enables PAE
          virtualbox.customize ["modifyvm", :id, "--longmode", "on"] # enables long mode (64 bit mode in GUEST OS)
          virtualbox.customize ["modifyvm", :id, "--hpet", "on"] # enables a High Precision Event Timer (HPET)
          virtualbox.customize ["modifyvm", :id, "--hwvirtex", "on"] # turn on host hardware virtualization extensions (VT-x|AMD-V)
          virtualbox.customize ["modifyvm", :id, "--nestedpaging", "on"] # if --hwvirtex is on, this enables nested paging
          virtualbox.customize ["modifyvm", :id, "--largepages", "on"] # if --hwvirtex & --nestedpaging are on
          virtualbox.customize ["modifyvm", :id, "--vtxvpid", "on"] # if --hwvirtex on
          virtualbox.customize ["modifyvm", :id, "--vtxux", "on"] # if --vtux on (Intel VT-x only) enables unrestricted guest mode
          virtualbox.customize ["modifyvm", :id, "--boot1", "disk"] # tells vm to boot from disk only
          virtualbox.customize ["modifyvm", :id, "--rtcuseutc", "on"] # lets the real-time clock (RTC) operate in UTC time
          virtualbox.customize ["modifyvm", :id, "--audio", "none"] # turn audio off
          virtualbox.customize ["modifyvm", :id, "--clipboard", "bidirectional"] # disable clipboard
          virtualbox.customize ["modifyvm", :id, "--accelerate3d", "on"]
          virtualbox.customize ["modifyvm", :id, "--usbehci", "off"] # disable usb hot-plug drivers

          virtualbox.customize [ "setextradata", :id, "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled", 0 ] # turns the timesync on
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-interval", 10000 ] # sync time every 10 seconds
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-min-adjust", 100 ] # adjustments if drift > 100 ms
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-on-restore", 1 ] # sync time on restore
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-start", 1 ] # sync time on start
          virtualbox.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ] # at 1 second drift, the time will be set and not "smoothly" adjusted
          virtualbox.customize ['modifyvm', :id, '--cableconnected1', 'on'] # fix for https://github.com/mitchellh/vagrant/issues/7648
          virtualbox.customize ['modifyvm', :id, '--cableconnected2', 'on'] # fix for https://github.com/mitchellh/vagrant/issues/7648
        end

        config.vm.network :private_network, ip: opts[:eth1]

        config.vm.provision "shell", privileged: false, inline: bring_up_host_interface, keep_color: true, name: "bring_up_host_interface"

      end
  end
end
